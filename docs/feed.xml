<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-04-09T17:13:57+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">the Docs from fengxuway</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">在自己的服务器上搭建图床服务</title><link href="http://localhost:4000/%E5%BB%BA%E7%AB%99/https/2021/04/09/picture-bed.html" rel="alternate" type="text/html" title="在自己的服务器上搭建图床服务" /><published>2021-04-09T16:26:24+08:00</published><updated>2021-04-09T16:26:24+08:00</updated><id>http://localhost:4000/%E5%BB%BA%E7%AB%99/https/2021/04/09/picture-bed</id><content type="html" xml:base="http://localhost:4000/%E5%BB%BA%E7%AB%99/https/2021/04/09/picture-bed.html">&lt;p&gt;众所周知，Markdown文档需要图床作为支持，才能在互联网中方便的共享。在图床平台里，七牛云深得大家推荐，可弊端也很明显，需要手机号注册（貌似还需要域名备案？），大陆服务的通病吧。个人对这个颇有芥蒂，生怕不小心分享了一些越界内容被抓到小辫辫。另外还有一些免费的小网站提供图床，又担心随时可能停服关门，数据丢了就太可惜了。
直到今天无意间发现自己用的MWeb笔记软件有自定义图床，索性写个服务尝试了一下，整个过程很简单，如果大家对安全性/隐私性要求高，且用的markdown编辑软件提供如图“自定义图床”这样的功能，不妨一试～
&lt;img src=&quot;https://file.maogu.im/2021/04/09/f76d5fdb-7f8f-482d-8144-97336dd7cb9a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;图床服务代码&quot;&gt;图床服务代码&lt;/h2&gt;
&lt;p&gt;图床服务使用golang + gin框架实现，创建项目：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir picture_bed
cd picture_bed

# 初始化
项目
go mod init github.com/xxxx/xxxxx

# 下载依赖
go get github.com/gin-gonic/gin
go get github.com/satori/go.uuid

# 创建main代码
touch main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完整代码：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;log&quot;
	&quot;net/http&quot;
	&quot;os&quot;
	&quot;path/filepath&quot;
	&quot;regexp&quot;
	&quot;time&quot;

	&quot;github.com/gin-gonic/gin&quot;
	uuid &quot;github.com/satori/go.uuid&quot;
)

var (
	uploadAPIPath   = &quot;/&quot;
	downloadAPIPath = &quot;/&quot;
	dst             = &quot;/data/upload&quot;
	token           = &quot;自定义你的token&quot;

	reg = regexp.MustCompile(`.*?(\.\w+)$`)
)

func main() {
	gin.SetMode(gin.ReleaseMode)

	fmt.Println(&quot;hello&quot;)
	g := gin.New()

	g.Handle(http.MethodPost, uploadAPIPath, func(c *gin.Context) {
		if c.GetHeader(&quot;token&quot;) != token {
			c.String(http.StatusUnauthorized, &quot;token wrong&quot;)
			return
		}
		// 单文件
		file, err := c.FormFile(&quot;file&quot;)
		if err != nil {
			c.String(http.StatusBadRequest, &quot;no file found in form:file&quot;)
			return
		}
		log.Println(file.Filename)
		// 上传文件到指定的路径
		filename := randomFileName(file.Filename)
		fileURLPath := &quot;/&quot; + filepath.Join(time.Now().Format(&quot;2006/01/02&quot;))
		err = os.MkdirAll(filepath.Join(dst, fileURLPath), 0755)
		if err != nil {
			c.String(http.StatusInternalServerError, fmt.Sprintf(&quot;upload got error: %v&quot;, err))
			fmt.Println(&quot;error:&quot;, err)
		}
		fileURLPath = filepath.Join(fileURLPath, filename)
		absPath := filepath.Join(dst, fileURLPath)
		err = c.SaveUploadedFile(file, absPath)
		if err != nil {
			c.String(http.StatusInternalServerError, fmt.Sprintf(&quot;upload got error: %v&quot;, err))
			fmt.Println(&quot;error:&quot;, err)
		} else {
			c.String(http.StatusOK, fmt.Sprintf(&quot;{\&quot;url\&quot;:\&quot;%s\&quot;}&quot;, fileURLPath))
			fmt.Println(fmt.Sprintf(&quot;{\&quot;url\&quot;:\&quot;%s\&quot;}&quot;, fileURLPath))
		}
	})
	g.Static(downloadAPIPath, dst)
	log.Fatal(g.Run(&quot;127.0.0.1:8090&quot;))
}

func randomFileName(filename string) string {
	u := uuid.NewV4()

	match := reg.FindAllStringSubmatch(filename, -1)
	if len(match) == 0 {
		return u.String() + filename
	}
	return u.String() + match[0][1]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中端口&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8090&lt;/code&gt;和上传文件存放路径&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/upload/&lt;/code&gt;暂时写死在代码里，大家可酌情更改。
编译：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;env GOOS=linux go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;部署到linux服务器中&quot;&gt;部署到linux服务器中&lt;/h2&gt;
&lt;p&gt;将编译后的文件上传到服务器中，并添加执行权限，创建systemctl文件，以Ubuntu 20.04为例，文件放在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/bin/uploader&lt;/code&gt;中。systemctl文件路径：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/lib/systemd/system/uploader.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;内容：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=uploader service port 8090
Documentation=man:uuidd(8)

[Service]
ExecStart=/usr/local/bin/uploader
Restart=no
User=root
Group=root
#ProtectSystem=strict
#ProtectHome=yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;加载配置，启动&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart uploader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用域名代理：
安装nginx，并添加配置：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen      80;
    server_name file.maogu.im;
    access_log  /var/log/git-access.log;
    location / {
        proxy_pass          http://127.0.0.1:8090;
        proxy_set_header    Host  $host;
        proxy_set_header    x-Forwarded-For $http_x_forwarded_for;
        proxy_redirect      off;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;记得修改域名为你自己的。重新加载nginx配置即生效。
域名使用80端口，若想使用https服务，需要生成https证书，后面更新相关文档。&lt;/p&gt;

&lt;h2 id=&quot;和mweb软件整合&quot;&gt;和MWeb软件整合&lt;/h2&gt;
&lt;p&gt;依次进入首选项 - 发布服务 - 图床 - 自定义：
&lt;img src=&quot;https://file.maogu.im/2021/04/09/abf2fd8f-f5aa-46b0-9f46-66de677643de.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按你的服务域名填写对应项：
&lt;img src=&quot;https://file.maogu.im/2021/04/09/6c0570d1-7e51-4cc0-b1f6-16abea1f0d33.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意修改API地址/域名前缀/token等信息。
保存后，在MWeb的外部文档模式（&lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;E&lt;/kbd&gt;）右键点击需要使用图床的文件夹，点击“编辑”：
&lt;img src=&quot;https://file.maogu.im/2021/04/09/99aa04bc-b8ce-4142-a513-cd783c9cd85b.jpg&quot; alt=&quot;&quot; /&gt;
选中刚刚创建的图床就可以了。编辑文档时直接粘贴图片，即自动上传并生成图片链接。&lt;/p&gt;</content><author><name></name></author><category term="建站" /><category term="https" /><summary type="html">众所周知，Markdown文档需要图床作为支持，才能在互联网中方便的共享。在图床平台里，七牛云深得大家推荐，可弊端也很明显，需要手机号注册（貌似还需要域名备案？），大陆服务的通病吧。个人对这个颇有芥蒂，生怕不小心分享了一些越界内容被抓到小辫辫。另外还有一些免费的小网站提供图床，又担心随时可能停服关门，数据丢了就太可惜了。 直到今天无意间发现自己用的MWeb笔记软件有自定义图床，索性写个服务尝试了一下，整个过程很简单，如果大家对安全性/隐私性要求高，且用的markdown编辑软件提供如图“自定义图床”这样的功能，不妨一试～</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2021/04/09/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-04-09T13:33:24+08:00</published><updated>2021-04-09T13:33:24+08:00</updated><id>http://localhost:4000/jekyll/update/2021/04/09/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2021/04/09/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.maogu.im/2021/04/09/068dafe1-4b03-4948-83ab-25683bfafa81.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>